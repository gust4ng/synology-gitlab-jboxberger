#!/bin/sh
# Copyright (c) 2000-2015 Synology Inc. All rights reserved.

. "$(dirname $0)"/lib

PKG_NAME="__PKG_NAME__"
PKG_SHORT=gitlab
ETC_PATH="/usr/syno/etc/packages/$PKG_NAME/"
TARGET_PATH="/var/packages/$PKG_NAME/target"
SHARE_PATH="$(synoshare --get docker | grep $'\t Path' | sed 's/.*\[\(.*\)].*/\1/')"

REDIS_NAME=synology_gitlab_redis
REDIS_PROFILE="$TARGET_PATH"/config/synology_gitlab_redis
REDIS_PACKAGE_NAME="__REDIS_PACKAGE_NAME__"
REDIS_PACKAGE_NAME_ESCAPED="__REDIS_PACKAGE_NAME_ESCAPED__"
REDIS_VERSION="__REDIS_VERSION__"
REDIS_SIZE="__REDIS_SIZE__"

POSTGRESQL_NAME=synology_gitlab_db
POSTGRESQL_PROFILE="$TARGET_PATH"/config/synology_gitlab_db
POSTGRESQL_PACKAGE_NAME="__POSTGRESQL_PACKAGE_NAME__"
POSTGRESQL_PACKAGE_NAME_ESCAPED="__POSTGRESQL_PACKAGE_NAME_ESCAPED__"
POSTGRESQL_VERSION="__POSTGRESQL_VERSION__"
POSTGRESQL_SIZE="__POSTGRESQL_SIZE__"
POSTGRESQL_SHARE="__POSTGRESQL_SHARE__"

GITLAB_NAME=synology_gitlab
GITLAB_PROFILE="$TARGET_PATH"/config/synology_gitlab
GITLAB_PACKAGE_NAME="__GITLAB_PACKAGE_NAME__"
GITLAB_PACKAGE_NAME_ESCAPED="__GITLAB_PACKAGE_NAME_ESCAPED__"
GITLAB_VERSION="__GITLAB_VERSION__"
GITLAB_SIZE="__GITLAB_SIZE__"

SYNO_WEBAPI=/usr/syno/bin/synowebapi
DOCKER_BIN=/usr/local/bin/docker
DOCKER_GITLAB_CONFIG_CUSTOM="$ETC_PATH"/config_custom
DOCKER_GITLAB_CONFIG_CONTAINER_PORTS="$ETC_PATH"/config_container_ports
DOCKER_GITLAB_CONFIG_FILE=/tmp/"$GITLAB_NAME".config


if [ "$SYNOPKG_TEMP_LOGFILE" ]; then
	log() {
		local text="$1"
		local idx=0
		shift 1
		for val in "$@"; do
			text="${text//\{$idx\}/$val}"
			let idx=1+$idx
		done
		echo "$text" >> $SYNOPKG_TEMP_LOGFILE
	}
fi

quote_sed() {
	sed -e 's|\\|\\\\|g' -e 's|&|\\\&|g' -e 's|/|\\/|g'
}

quote_sql() {
	sed -e "s|\`|\`\`|g"
}

quote_sh() {
	sed -e 's|\\|\\\\|g' -e 's|\"|\\\"|g' -e 's|`|\\`|g' -e 's|\\$|\\$|g'
}

quote_json() {
	sed -e 's|\\|\\\\|g' -e 's|\"|\\\"|g'
}

DBAdminCheck()
{
	local user="$1"
	local password="$2"
	local mysql="$3"

	# Check admin's account and password
	if ! $DOCKER_BIN exec -i $POSTGRESQL_NAME psql -U postgres -c "\q"; then
		log "$wizard_admin_info_error"
		return 1
	fi

	# Check whether the account have all privileges *.* or not
	#$mysql -u "$user" --password="$password" -e "SHOW GRANTS FOR ${user}@localhost" | grep -q "GRANT ALL PRIVILEGES ON \*\.\* TO '${user}'@'localhost'.* WITH GRANT OPTION.*"
	#if [ $? -eq 1 ]; then
	#	log "$db_admin_permission_error"
  # return 1
  #fi
	return 0
}


#=======================================================================================================================
# stringInArray
#=======================================================================================================================
stringInArray() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 1; done
  return 0
}

#=======================================================================================================================
# BackupCustomEnvironmentVariablesOld
#=======================================================================================================================
BackupCustomEnvironmentVariables()
{
    $SYNO_WEBAPI --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$DOCKER_GITLAB_CONFIG_FILE" name="$GITLAB_NAME"
    if ! [ -s "$DOCKER_GITLAB_CONFIG_FILE" ]; then
      return 0
    fi

    env_ignore_file=$(cd `dirname $0` && pwd)/env_ignore
    declare -A env_ignore_variables; declare -a keys;  declare -a values;

    i=0
    while read line;
    do
        env_ignore_variables[$i]=$(echo "$line" | tr -d '\r')
        (( i++ ))
    done < $env_ignore_file

    # Rewrite File from new
    if [ -f "$DOCKER_GITLAB_CONFIG_CUSTOM" ]; then
        rm "$DOCKER_GITLAB_CONFIG_CUSTOM"
    fi

    i=0
    tmp_keys=$(jq '.env_variables[] | .key' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        keys[$i]="$line"
        (( i++ ))
    done <<< "${tmp_keys[@]}"

    i=0
    tmp_values=$(jq '.env_variables[] | .value' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        values[$i]="$line"
        (( i++ ))
    done <<< "${tmp_values[@]}"

    for i in "${!keys[@]}"
    do
        stringInArray "${keys[$i]}" "${env_ignore_variables[@]}"
        if [ $? == 0 ]; then
            echo "${keys[$i]}=${values[$i]}" >> "$DOCKER_GITLAB_CONFIG_CUSTOM"
        fi
    done

    rm $DOCKER_GITLAB_CONFIG_FILE
    return 1
}

#=======================================================================================================================
# RestoreCustomEnvironmentVariables
#=======================================================================================================================
RestoreCustomEnvironmentVariables()
{
    declare -a keys

    # if file exists and has a size greater than zero
    if ! [ -s $DOCKER_GITLAB_CONFIG_CUSTOM ]
    then
        return 0
    fi

    cp $GITLAB_PROFILE $GITLAB_PROFILE"_backup"
    chmod 0644 $GITLAB_PROFILE"_backup"

    i=0
    tmp_keys=$(jq '.env_variables[].key' <"$GITLAB_PROFILE" | tr -d '"')
    while read line
    do
        keys[$i]="$line"
        (( i++ ))
    done <<< "${tmp_keys[@]}"

    while read LINE;
    do
        key=$(echo $LINE | cut -f1 -d=)
        value=$(echo $LINE | cut -f2 -d=)
        value=$(echo "$value" | tr -d '\r') # trim \r on line-end
        stringInArray "$key" "${keys[@]}"
        if [ $? == 1 ]; then
            index=$(echo ${keys[@]/$key//} | cut -d/ -f1 | wc -w | tr -d ' ')
             #echo "$key:$value:$index"
            jq -c ".env_variables[$index].value=\"$value\""  <$GITLAB_PROFILE >$GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
        else
            jq -c ".env_variables += [{\"key\" : \"$key\", \"value\" : \"$value\"}]"  <$GITLAB_PROFILE >$GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
        fi
    done < $DOCKER_GITLAB_CONFIG_CUSTOM
}

#=======================================================================================================================
# BackupContainerPorts
#=======================================================================================================================
BackupContainerPorts()
{
    declare -a container_ports;  declare -a host_ports; declare -a types;

    $SYNO_WEBAPI --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$DOCKER_GITLAB_CONFIG_FILE" name="$GITLAB_NAME"
    if ! [ -s "$DOCKER_GITLAB_CONFIG_FILE" ]; then
      return 0
    fi

    # Rewrite File from new
    if [ -f "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS" ]; then
        rm "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS"
    fi

    i=0
    tmp_container_ports=$(jq '.port_bindings[].container_port' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        container_ports[$i]="$line"
        (( i++ ))
    done <<< "${tmp_container_ports[@]}"

    i=0
    tmp_host_ports=$(jq '.port_bindings[].host_port' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        host_ports[$i]="$line"
        (( i++ ))
    done <<< "${tmp_host_ports[@]}"

    i=0
    tmp_types=$(jq '.port_bindings[].type' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        types[$i]="$line"
        (( i++ ))
    done <<< "${tmp_types[@]}"

    for i in "${!container_ports[@]}"
    do
        echo "${container_ports[$i]}:${host_ports[$i]}:${types[$i]}" >> "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS"
    done

    rm $DOCKER_GITLAB_CONFIG_FILE
    return 1
}

#=======================================================================================================================
# BackupContainerPorts
#=======================================================================================================================
RestoreContainerPorts()
{
    # if file exists and has a size greater than zero
    if ! [ -s $DOCKER_GITLAB_CONFIG_CONTAINER_PORTS ]
    then
        return 0
    fi

    cp $GITLAB_PROFILE $GITLAB_PROFILE"_backup_ports"
    chmod 0644 $GITLAB_PROFILE"_backup_ports"

    json_content=""
    while read LINE;
    do
        container_port=$(echo $LINE | cut -f1 -d: | tr -d '\r')
        host_port=$(echo $LINE | cut -f2 -d: | tr -d '\r')
        type=$(echo $LINE | cut -f3 -d: | tr -d '\r')
        json_content="$json_content{\"container_port\" : $container_port, \"host_port\" : \"$host_port\", \"type\" : \"$type\"},"
    done < $DOCKER_GITLAB_CONFIG_CONTAINER_PORTS

    jq -c ".port_bindings=[${json_content::-1}]" < $GITLAB_PROFILE > $GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
}



#=======================================================================================================================
# Fix SSH Key issue on 10.4.1
#=======================================================================================================================
generate_ssh_key() {
  echo -n "${1^^} "
  ssh-keygen -qt ${1} -N '' -f ${2}
}

generate_ssh_host_keys() {

  local GITLAB_DATA_DIR=$1

  if ! [ -d "$GITLAB_DATA_DIR/ssh/" ]; then
    mkdir -p "$GITLAB_DATA_DIR/ssh/"
  fi

  if [[ ! -e ${GITLAB_DATA_DIR}/ssh/ssh_host_rsa_key ]]; then
    echo -n "Generating OpenSSH host keys... "
    generate_ssh_key rsa      ${GITLAB_DATA_DIR}/ssh/ssh_host_key
    generate_ssh_key rsa      ${GITLAB_DATA_DIR}/ssh/ssh_host_rsa_key
    generate_ssh_key dsa      ${GITLAB_DATA_DIR}/ssh/ssh_host_dsa_key
    generate_ssh_key ecdsa    ${GITLAB_DATA_DIR}/ssh/ssh_host_ecdsa_key
    generate_ssh_key ed25519  ${GITLAB_DATA_DIR}/ssh/ssh_host_ed25519_key
  fi

  # ensure existing host keys have the right permissions
  chmod 0600 ${GITLAB_DATA_DIR}/ssh/*_key
  chmod 0644 ${GITLAB_DATA_DIR}/ssh/*.pub
}
#=======================================================================================================================
# Fix End
#=======================================================================================================================
