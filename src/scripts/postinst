#!/bin/sh
# Copyright (c) 2000-2015 Synology Inc. All rights reserved.

. "$(dirname $0)"/common

UpdateConfig()
{
	if [ -f "$ETC_PATH"/config ]; then
		. "$ETC_PATH"/config
	fi
	if [ "$SYNOPKG_PKG_STATUS" = INSTALL ]; then

		if [ "$pkgwizard_container_port" = "HTTPS_SELF_SIGNED" ]; then
		  GITLAB_HTTPS="true"
		  SSL_SELF_SIGNED="true"
		  HTTP_CONTAINER_PORT=443

		  GITLAB_CERT_DIR="$SHARE_PATH/$pkgwizard_dataroot/certs"
		  if ! [ -d "$GITLAB_CERT_DIR" ]; then
		    mkdir -p $GITLAB_CERT_DIR
		  fi

		  if ! [ -f "$GITLAB_CERT_DIR/gitlab.key" ]; then
		    openssl genrsa -out "$GITLAB_CERT_DIR/gitlab.key" 2048
		  fi

		  if ! [ -f "$GITLAB_CERT_DIR/gitlab.csr" ]; then
        openssl req -new -key "$GITLAB_CERT_DIR/gitlab.key" -subj "/C=DE/ST=Germany/L=Duisburg/O=jboxberger/CN=$pkgwizard_hostname" -out "$GITLAB_CERT_DIR/gitlab.csr"
		  fi

		  if ! [ -f "$GITLAB_CERT_DIR/gitlab.crt" ]; then
        openssl x509 -req -days 3650 -in "$GITLAB_CERT_DIR/gitlab.csr" -signkey "$GITLAB_CERT_DIR/gitlab.key" -out "$GITLAB_CERT_DIR/gitlab.crt"
		  fi
      chmod 400 "$GITLAB_CERT_DIR/gitlab.key"

      if ! [ -f "$GITLAB_CERT_DIR/dhparam.pem" ] && [ -f "/usr/syno/etc/ssl/dh2048.pem" ]; then
        cp "/usr/syno/etc/ssl/dh2048.pem" "$GITLAB_CERT_DIR/dhparam.pem"
      fi

    elif [ "$pkgwizard_container_port" = "HTTPS" ]; then
		  GITLAB_HTTPS="true"
      SSL_SELF_SIGNED="false"
		  HTTP_CONTAINER_PORT=443
		else
      GITLAB_HTTPS="false"
      SSL_SELF_SIGNED="false"
		  HTTP_CONTAINER_PORT=80
		fi

		HTTP_PORT="$pkgwizard_http_port"
		SSH_PORT="$pkgwizard_ssh_port"
		DB_NAME="$pkgwizard_db_name"
		DB_USER="$pkgwizard_db_user_account"
		DB_PASS="$pkgwizard_db_user_password"
		OTP_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"
		DB_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"
		SECRETS_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"
		HOSTNAME="$pkgwizard_hostname"
		ADMIN_EMAIL="$pkgwizard_admin_email"
		SMTP_ENABLE="$pkgwizard_smtp_enable"
		SMTP_ADDR="$pkgwizard_smtp_address"
		SMTP_PORT="$pkgwizard_smtp_port"
		SMTP_USER="$pkgwizard_smtp_user"
		SMTP_PASS="$pkgwizard_smtp_pass"
		SMTP_VERIFY="$pkgwizard_smtp_verify"
		SHARE="$pkgwizard_dataroot"

	elif [ "$SYNOPKG_PKG_STATUS" = UPGRADE ] && [ ! -z "$pkgwizard_db_name" ]; then
		#upgrade from M5 to M10
		DB_NAME="$pkgwizard_db_name"
		DB_USER="$pkgwizard_db_user_account"
		DB_PASS="$pkgwizard_db_user_password"
	fi

	[ -z "$OTP_SALT" ] && OTP_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"
	[ -z "$DB_SALT" ] && DB_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"
	[ -z "$SECRETS_SALT" ] && SECRETS_SALT="$(openssl rand -base64 48 2> /dev/null | sed 's,/,_,g')"

	(
		echo GITLAB_HTTPS="\"$(echo "$GITLAB_HTTPS" | quote_sh)\""
		echo SSL_SELF_SIGNED="\"$(echo "$SSL_SELF_SIGNED" | quote_sh)\""
		echo HTTP_CONTAINER_PORT="\"$(echo "$HTTP_CONTAINER_PORT" | quote_sh)\""
		echo HTTP_PORT="\"$(echo "$HTTP_PORT" | quote_sh)\""
		echo SSH_PORT="\"$(echo "$SSH_PORT" | quote_sh)\""
		echo DB_NAME="\"$(echo "$DB_NAME" | quote_sh)\""
		echo DB_USER="\"$(echo "$DB_USER" | quote_sh)\""
		echo DB_PASS="\"$(echo "$DB_PASS" | quote_sh)\""
		echo OTP_SALT="\"$(echo "$OTP_SALT" | quote_sh)\""
		echo DB_SALT="\"$(echo "$DB_SALT" | quote_sh)\""
		echo SECRETS_SALT="\"$(echo "$SECRETS_SALT" | quote_sh)\""
		echo HOSTNAME="\"$(echo "$HOSTNAME" | quote_sh)\""
		echo ADMIN_EMAIL="\"$(echo "$ADMIN_EMAIL" | quote_sh)\""
		echo SMTP_ENABLE="\"$(echo "$SMTP_ENABLE" | quote_sh)\""
		echo SMTP_ADDR="\"$(echo "$SMTP_ADDR" | quote_sh)\""
		echo SMTP_PORT="\"$(echo "$SMTP_PORT" | quote_sh)\""
		echo SMTP_USER="\"$(echo "$SMTP_USER" | quote_sh)\""
		echo SMTP_PASS="\"$(echo "$SMTP_PASS" | quote_sh)\""
		echo SMTP_VERIFY="\"$(echo "$SMTP_VERIFY" | quote_sh)\""
		echo SHARE="\"$(echo "$SHARE" | quote_sh)\""
		echo VERSION="\"$(echo "$SYNOPKG_PKGVER" | cut -d '-' -f 1 | quote_sh)\""
	) > "$ETC_PATH"/config
}

UpdateConfig
. "$ETC_PATH"/config

GITLAB_HTTP_SCHEME="http"
if [ $GITLAB_HTTPS == true ]; then
  GITLAB_HTTP_SCHEME="https"
fi

sed -i \
  -e "s/__HTTP_PROTOCOL__/$(echo "$GITLAB_HTTP_SCHEME" | quote_json | quote_sed)/g" \
  "$TARGET_PATH"/ui/config

sed -i \
	-e "s/__HTTP_PORT__/$(echo "$HTTP_PORT" | quote_json | quote_sed)/g" \
	"$TARGET_PATH"/ui/config \
	"$GITLAB_PROFILE"
sed -i \
	-e "s/__GITLAB_HTTPS__/$(echo "$GITLAB_HTTPS" | quote_json | quote_sed)/g" \
	-e "s/__SSL_SELF_SIGNED__/$(echo "$SSL_SELF_SIGNED" | quote_json | quote_sed)/g" \
	-e "s/__HTTP_CONTAINER_PORT__/$(echo "$HTTP_CONTAINER_PORT" | quote_json | quote_sed)/g" \
	-e "s/__SSH_PORT__/$(echo "$SSH_PORT" | quote_json | quote_sed)/g" \
	-e "s/__SHARE__/$(echo "$SHARE" | quote_json | quote_sed)/g" \
	-e "s/__OTP_SALT__/$(echo "$OTP_SALT" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__DB_SALT__/$(echo "$DB_SALT" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SECRETS_SALT__/$(echo "$SECRETS_SALT" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__HOSTNAME__/$(echo "$HOSTNAME" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__ADMIN_EMAIL__/$(echo "$ADMIN_EMAIL" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SMTP_ENABLE__/$(echo "$SMTP_ENABLE" | quote_json | quote_sed)/g" \
	-e "s/__SMTP_ADDR__/$(echo "$SMTP_ADDR" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SMTP_PORT__/$(echo "$SMTP_PORT" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SMTP_USER__/$(echo "$SMTP_USER" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SMTP_PASS__/$(echo "$SMTP_PASS" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__SMTP_VERIFY__/$([ "$SMTP_VERIFY" = true ] && echo peer || echo none)/g" \
	-e "s/__POSTGRESQL_SHARE__/$(echo "$POSTGRESQL_SHARE" | quote_sed | quote_json | quote_sed)/g" \
	"$GITLAB_PROFILE"
sed -i \
	-e "s/__DB_NAME__/$(echo "$DB_NAME" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__DB_USER__/$(echo "$DB_USER" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__DB_PASS__/$(echo "$DB_PASS" | quote_sed | quote_json | quote_sed)/g" \
	-e "s/__POSTGRESQL_SHARE__/$(echo "$POSTGRESQL_SHARE" | quote_sed | quote_json | quote_sed)/g" \
	"$POSTGRESQL_PROFILE"

########################################################################################################################
# RESTORE CUSTOM CONFIGURATION
########################################################################################################################
RestoreCustomEnvironmentVariables
RestoreContainerPorts

########################################################################################################################
# ADD IMAGES
########################################################################################################################
/var/packages/Docker/target/tool/helper \
	"$REDIS_PACKAGE_NAME" "$REDIS_VERSION" "$TARGET_PATH"/docker/"$REDIS_PACKAGE_NAME_ESCAPED"-"$REDIS_VERSION".tar.xz $REDIS_SIZE \
	"$POSTGRESQL_PACKAGE_NAME" "$POSTGRESQL_VERSION" "$TARGET_PATH"/docker/"$POSTGRESQL_PACKAGE_NAME_ESCAPED"-"$POSTGRESQL_VERSION".tar.xz $POSTGRESQL_SIZE \
	"$GITLAB_PACKAGE_NAME" "$GITLAB_VERSION" "$TARGET_PATH"/docker/"$GITLAB_PACKAGE_NAME_ESCAPED"-"$GITLAB_VERSION".tar.xz $GITLAB_SIZE \
	|| exit 1

########################################################################################################################
# REDIS
########################################################################################################################
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=delete name="$REDIS_NAME" force=true preserve_profile=false
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=create is_run_instantly=true profile="$(cat "$REDIS_PROFILE")" || exit 1
# disable logging to enable sleep
$DOCKER_BIN exec "$REDIS_NAME" sed -i -e 's|^exec "$@"$|exec "$@" --save ""|g' /usr/local/bin/docker-entrypoint.sh

########################################################################################################################
# POSTGRES
########################################################################################################################
if ! [ -d "$SHARE_PATH"/"$POSTGRESQL_SHARE" ]; then
  mkdir -p "$SHARE_PATH"/"$POSTGRESQL_SHARE"
fi
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=delete name="$POSTGRESQL_NAME" force=true preserve_profile=false
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=create is_run_instantly=true profile="$(cat "$POSTGRESQL_PROFILE")" || exit 1

########################################################################################################################
# GITLAB
########################################################################################################################
# fix ssh key issue on 10.4.1
if [ $(echo "$GITLAB_VERSION" | tr -d ".") -ge 1041  ]; then
  generate_ssh_host_keys "$SHARE_PATH/$SHARE"
fi

$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=create is_run_instantly=false profile="$(cat "$GITLAB_PROFILE")" || exit 1

# stop dependent container to prevent start-stop-script get out of sync
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=stop name="$POSTGRESQL_NAME"  || exit 1
$SYNO_WEBAPI --exec api=SYNO.Docker.Container version=1 method=stop name="$REDIS_NAME"  || exit 1

exit 0
